def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion rootProject.ext.android.SdkVersion

    def keystorePropertiesFile = rootProject.file("key.properties")
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
        additionalParameters = ['--multi-dex', '--set-max-idx-number=40000']
    }

    dataBinding {
        enabled = true
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name.equals('release')) {
                outputFileName = getProductName() +
                        "_v${defaultConfig.versionName}_code${defaultConfig.versionCode}_${releaseTime()}" +
                        '.apk'
            }
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        multiDexEnabled true
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionName rootProject.ext.android.versionName
        versionCode rootProject.ext.android.versionCode
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ moduleName : project.getName() ]
            }
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

//获取产品的名字
def getProductName() {
    return "info_collecter"
}
//获取当前系统的时间
def releaseTime() {
    return new Date().format("yyyy-MM-dd-HH-mm-ss", TimeZone.getTimeZone("GMT+08"));
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    testImplementation 'junit:junit:4.12'

    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support:cardview-v7:25.1.0'
    implementation 'com.android.support:design:25.1.0'
    implementation rootProject.ext.dependencies["gson"]
    implementation rootProject.ext.dependencies["imagerloader"]
    implementation rootProject.ext.dependencies["zxing"]
    implementation rootProject.ext.dependencies["permissions"]
    implementation rootProject.ext.dependencies["androidUtils"]
    implementation rootProject.ext.dependencies["network"]
    implementation rootProject.ext.dependencies["pullrefresh"]
    implementation rootProject.ext.dependencies["AdvancedWebView"]
    implementation rootProject.ext.dependencies["materialDialog"]
    implementation rootProject.ext.dependencies["materialviewpager"]
    implementation rootProject.ext.dependencies["kenburnsview"]
    implementation rootProject.ext.dependencies["materialtabstrip"]
    implementation rootProject.ext.dependencies["glide"]
    implementation rootProject.ext.dependencies["pullloadmorerecyclerview"]
    implementation(rootProject.ext.dependencies["multidex"]) {
        transitive = false
    }
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    implementation('br.com.simplepass:loading-button-android:1.14.0') {
        transitive = false
    }
    implementation 'com.github.czy1121:update:1.1.1'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation rootProject.ext.dependencies["arouter-api"]
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    implementation files('libs/tbs_sdk_thirdapp_v3.6.0.1249_43610_sharewithdownload_withoutGame_obfs_20180608_114954.jar')
    implementation files('libs/MiPush_SDK_Client_3_6_2.jar')
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
}
